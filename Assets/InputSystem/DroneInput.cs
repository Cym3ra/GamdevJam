//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/DroneInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DroneInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DroneInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DroneInput"",
    ""maps"": [
        {
            ""name"": ""Drone"",
            ""id"": ""48192659-cfbb-4b17-916b-8ad3a20cc244"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dbb8ab44-e1c9-4266-b2b1-ec4a60272ee7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""07de022a-b547-4ed8-b109-157b90ba14a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""4e6eb593-2dc2-4b32-976d-6c8088ffc343"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FlyUpDown"",
                    ""type"": ""Button"",
                    ""id"": ""36036e4c-10a4-4a40-aea6-41bc54f249a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleFlying"",
                    ""type"": ""Button"",
                    ""id"": ""5c1cce52-6916-4f48-b309-af825d6cb3c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""e00e2e66-3257-45e3-97ab-a7936bd7c5e9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ebcbd0a9-0f53-4d2b-9529-e62b8f5e210a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1bb7b921-b591-448c-8a76-60564e51383c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d20dcf3e-ddbe-4afb-87fc-0610975217ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c39094cf-9763-46a1-abde-2bfb86ce7a54"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43c2b6eb-46c5-46a0-84bc-480063378676"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8cc77a5-3525-49d2-8efa-c7abb76a9edd"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1bca7a77-bec0-4345-b3b7-dd3032d421d2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""33cdb6f1-2381-41a5-a4b6-2cdab174c536"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3d98b081-2ee5-467e-af50-29f6fe0d1a2d"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a093dcb7-0741-4884-a998-acae14c768ab"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleFlying"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_Move = m_Drone.FindAction("Move", throwIfNotFound: true);
        m_Drone_Interact = m_Drone.FindAction("Interact", throwIfNotFound: true);
        m_Drone_Look = m_Drone.FindAction("Look", throwIfNotFound: true);
        m_Drone_FlyUpDown = m_Drone.FindAction("FlyUpDown", throwIfNotFound: true);
        m_Drone_ToggleFlying = m_Drone.FindAction("ToggleFlying", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_Move;
    private readonly InputAction m_Drone_Interact;
    private readonly InputAction m_Drone_Look;
    private readonly InputAction m_Drone_FlyUpDown;
    private readonly InputAction m_Drone_ToggleFlying;
    public struct DroneActions
    {
        private @DroneInput m_Wrapper;
        public DroneActions(@DroneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Drone_Move;
        public InputAction @Interact => m_Wrapper.m_Drone_Interact;
        public InputAction @Look => m_Wrapper.m_Drone_Look;
        public InputAction @FlyUpDown => m_Wrapper.m_Drone_FlyUpDown;
        public InputAction @ToggleFlying => m_Wrapper.m_Drone_ToggleFlying;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnInteract;
                @Look.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnLook;
                @FlyUpDown.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyUpDown;
                @FlyUpDown.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyUpDown;
                @FlyUpDown.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnFlyUpDown;
                @ToggleFlying.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnToggleFlying;
                @ToggleFlying.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnToggleFlying;
                @ToggleFlying.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnToggleFlying;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @FlyUpDown.started += instance.OnFlyUpDown;
                @FlyUpDown.performed += instance.OnFlyUpDown;
                @FlyUpDown.canceled += instance.OnFlyUpDown;
                @ToggleFlying.started += instance.OnToggleFlying;
                @ToggleFlying.performed += instance.OnToggleFlying;
                @ToggleFlying.canceled += instance.OnToggleFlying;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);
    public interface IDroneActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnFlyUpDown(InputAction.CallbackContext context);
        void OnToggleFlying(InputAction.CallbackContext context);
    }
}
